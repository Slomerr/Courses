// <auto-generated />
using System;
using Courses.Models.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cources.Migrations
{
    [DbContext(typeof(CoursesDbContext))]
    [Migration("20230908131923_initialMigrate")]
    partial class initialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Courses.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("course_name");

                    b.HasKey("CourseId")
                        .HasName("pk_courses");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Courses.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.HasKey("EmployeeId")
                        .HasName("pk_employees");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_employees_organization_id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Courses.Models.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("inn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("OrganizationId")
                        .HasName("pk_organizations");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_organizations_teacher_id");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Courses.Models.StudyGroup", b =>
                {
                    b.Property<int>("StudyGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("study_group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudyGroupId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    b.HasKey("StudyGroupId")
                        .HasName("pk_study_groups");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("ix_study_groups_course_id");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_study_groups_teacher_id");

                    b.ToTable("study_groups", (string)null);
                });

            modelBuilder.Entity("Courses.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("teacher_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.HasKey("TeacherId")
                        .HasName("pk_teachers");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("EmployeeStudyGroup", b =>
                {
                    b.Property<int>("EmployeesEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employees_employee_id");

                    b.Property<int>("StudyGroupsStudyGroupId")
                        .HasColumnType("int")
                        .HasColumnName("study_groups_study_group_id");

                    b.HasKey("EmployeesEmployeeId", "StudyGroupsStudyGroupId")
                        .HasName("pk_employee_study_group");

                    b.HasIndex("StudyGroupsStudyGroupId")
                        .HasDatabaseName("ix_employee_study_group_study_groups_study_group_id");

                    b.ToTable("employee_study_group", (string)null);
                });

            modelBuilder.Entity("Courses.Models.Employee", b =>
                {
                    b.HasOne("Courses.Models.Organization", "Organization")
                        .WithMany("Employees")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employees_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Courses.Models.Organization", b =>
                {
                    b.HasOne("Courses.Models.Teacher", "Teacher")
                        .WithMany("Organizations")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_organizations_teachers_teacher_id");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Courses.Models.StudyGroup", b =>
                {
                    b.HasOne("Courses.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_study_groups_courses_course_id");

                    b.HasOne("Courses.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_study_groups_teachers_teacher_id");

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EmployeeStudyGroup", b =>
                {
                    b.HasOne("Courses.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_study_group_employees_employees_employee_id");

                    b.HasOne("Courses.Models.StudyGroup", null)
                        .WithMany()
                        .HasForeignKey("StudyGroupsStudyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_study_group_study_groups_study_groups_study_group_id");
                });

            modelBuilder.Entity("Courses.Models.Organization", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Courses.Models.Teacher", b =>
                {
                    b.Navigation("Organizations");
                });
#pragma warning restore 612, 618
        }
    }
}
